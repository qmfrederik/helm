// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hapi/services/tiller.proto
// </auto-generated>
// Original file comments:
// Copyright The Helm Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Hapi.Services.Tiller {
  /// <summary>
  /// ReleaseService is the service that a helm application uses to mutate,
  /// query, and manage releases.
  ///
  ///		Release: A named installation composed of a chart and
  /// 				 config. At any given time a release has one
  ///				 chart and one config.
  ///
  ///		Config:  A config is a YAML file that supplies values
  ///				 to the parametrizable templates of a chart.
  ///
  ///		Chart:   A chart is a helm package that contains
  ///				 metadata, a default config, zero or more
  ///				 optionally parameterizable templates, and
  ///				 zero or more charts (dependencies).
  /// </summary>
  public static partial class ReleaseService
  {
    static readonly string __ServiceName = "hapi.services.tiller.ReleaseService";

    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.ListReleasesRequest> __Marshaller_ListReleasesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.ListReleasesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.ListReleasesResponse> __Marshaller_ListReleasesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.ListReleasesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.GetReleaseStatusRequest> __Marshaller_GetReleaseStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.GetReleaseStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.GetReleaseStatusResponse> __Marshaller_GetReleaseStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.GetReleaseStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.GetReleaseContentRequest> __Marshaller_GetReleaseContentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.GetReleaseContentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.GetReleaseContentResponse> __Marshaller_GetReleaseContentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.GetReleaseContentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.UpdateReleaseRequest> __Marshaller_UpdateReleaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.UpdateReleaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.UpdateReleaseResponse> __Marshaller_UpdateReleaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.UpdateReleaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.InstallReleaseRequest> __Marshaller_InstallReleaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.InstallReleaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.InstallReleaseResponse> __Marshaller_InstallReleaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.InstallReleaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.UninstallReleaseRequest> __Marshaller_UninstallReleaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.UninstallReleaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.UninstallReleaseResponse> __Marshaller_UninstallReleaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.UninstallReleaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.GetVersionRequest> __Marshaller_GetVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.GetVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.GetVersionResponse> __Marshaller_GetVersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.GetVersionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.RollbackReleaseRequest> __Marshaller_RollbackReleaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.RollbackReleaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.RollbackReleaseResponse> __Marshaller_RollbackReleaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.RollbackReleaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.GetHistoryRequest> __Marshaller_GetHistoryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.GetHistoryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.GetHistoryResponse> __Marshaller_GetHistoryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.GetHistoryResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.TestReleaseRequest> __Marshaller_TestReleaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.TestReleaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Hapi.Services.Tiller.TestReleaseResponse> __Marshaller_TestReleaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Hapi.Services.Tiller.TestReleaseResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Hapi.Services.Tiller.ListReleasesRequest, global::Hapi.Services.Tiller.ListReleasesResponse> __Method_ListReleases = new grpc::Method<global::Hapi.Services.Tiller.ListReleasesRequest, global::Hapi.Services.Tiller.ListReleasesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListReleases",
        __Marshaller_ListReleasesRequest,
        __Marshaller_ListReleasesResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.GetReleaseStatusRequest, global::Hapi.Services.Tiller.GetReleaseStatusResponse> __Method_GetReleaseStatus = new grpc::Method<global::Hapi.Services.Tiller.GetReleaseStatusRequest, global::Hapi.Services.Tiller.GetReleaseStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReleaseStatus",
        __Marshaller_GetReleaseStatusRequest,
        __Marshaller_GetReleaseStatusResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.GetReleaseContentRequest, global::Hapi.Services.Tiller.GetReleaseContentResponse> __Method_GetReleaseContent = new grpc::Method<global::Hapi.Services.Tiller.GetReleaseContentRequest, global::Hapi.Services.Tiller.GetReleaseContentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReleaseContent",
        __Marshaller_GetReleaseContentRequest,
        __Marshaller_GetReleaseContentResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.UpdateReleaseRequest, global::Hapi.Services.Tiller.UpdateReleaseResponse> __Method_UpdateRelease = new grpc::Method<global::Hapi.Services.Tiller.UpdateReleaseRequest, global::Hapi.Services.Tiller.UpdateReleaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRelease",
        __Marshaller_UpdateReleaseRequest,
        __Marshaller_UpdateReleaseResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.InstallReleaseRequest, global::Hapi.Services.Tiller.InstallReleaseResponse> __Method_InstallRelease = new grpc::Method<global::Hapi.Services.Tiller.InstallReleaseRequest, global::Hapi.Services.Tiller.InstallReleaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InstallRelease",
        __Marshaller_InstallReleaseRequest,
        __Marshaller_InstallReleaseResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.UninstallReleaseRequest, global::Hapi.Services.Tiller.UninstallReleaseResponse> __Method_UninstallRelease = new grpc::Method<global::Hapi.Services.Tiller.UninstallReleaseRequest, global::Hapi.Services.Tiller.UninstallReleaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UninstallRelease",
        __Marshaller_UninstallReleaseRequest,
        __Marshaller_UninstallReleaseResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.GetVersionRequest, global::Hapi.Services.Tiller.GetVersionResponse> __Method_GetVersion = new grpc::Method<global::Hapi.Services.Tiller.GetVersionRequest, global::Hapi.Services.Tiller.GetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVersion",
        __Marshaller_GetVersionRequest,
        __Marshaller_GetVersionResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.RollbackReleaseRequest, global::Hapi.Services.Tiller.RollbackReleaseResponse> __Method_RollbackRelease = new grpc::Method<global::Hapi.Services.Tiller.RollbackReleaseRequest, global::Hapi.Services.Tiller.RollbackReleaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RollbackRelease",
        __Marshaller_RollbackReleaseRequest,
        __Marshaller_RollbackReleaseResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.GetHistoryRequest, global::Hapi.Services.Tiller.GetHistoryResponse> __Method_GetHistory = new grpc::Method<global::Hapi.Services.Tiller.GetHistoryRequest, global::Hapi.Services.Tiller.GetHistoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHistory",
        __Marshaller_GetHistoryRequest,
        __Marshaller_GetHistoryResponse);

    static readonly grpc::Method<global::Hapi.Services.Tiller.TestReleaseRequest, global::Hapi.Services.Tiller.TestReleaseResponse> __Method_RunReleaseTest = new grpc::Method<global::Hapi.Services.Tiller.TestReleaseRequest, global::Hapi.Services.Tiller.TestReleaseResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RunReleaseTest",
        __Marshaller_TestReleaseRequest,
        __Marshaller_TestReleaseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Hapi.Services.Tiller.TillerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ReleaseService</summary>
    public abstract partial class ReleaseServiceBase
    {
      /// <summary>
      /// ListReleases retrieves release history.
      /// TODO: Allow filtering the set of releases by
      /// release status. By default, ListAllReleases returns the releases who
      /// current status is "Active".
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListReleases(global::Hapi.Services.Tiller.ListReleasesRequest request, grpc::IServerStreamWriter<global::Hapi.Services.Tiller.ListReleasesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetReleasesStatus retrieves status information for the specified release.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Hapi.Services.Tiller.GetReleaseStatusResponse> GetReleaseStatus(global::Hapi.Services.Tiller.GetReleaseStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetReleaseContent retrieves the release content (chart + value) for the specified release.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Hapi.Services.Tiller.GetReleaseContentResponse> GetReleaseContent(global::Hapi.Services.Tiller.GetReleaseContentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateRelease updates release content.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Hapi.Services.Tiller.UpdateReleaseResponse> UpdateRelease(global::Hapi.Services.Tiller.UpdateReleaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// InstallRelease requests installation of a chart as a new release.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Hapi.Services.Tiller.InstallReleaseResponse> InstallRelease(global::Hapi.Services.Tiller.InstallReleaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UninstallRelease requests deletion of a named release.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Hapi.Services.Tiller.UninstallReleaseResponse> UninstallRelease(global::Hapi.Services.Tiller.UninstallReleaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetVersion returns the current version of the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Hapi.Services.Tiller.GetVersionResponse> GetVersion(global::Hapi.Services.Tiller.GetVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RollbackRelease rolls back a release to a previous version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Hapi.Services.Tiller.RollbackReleaseResponse> RollbackRelease(global::Hapi.Services.Tiller.RollbackReleaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ReleaseHistory retrieves a release's history.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Hapi.Services.Tiller.GetHistoryResponse> GetHistory(global::Hapi.Services.Tiller.GetHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RunReleaseTest executes the tests defined of a named release
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task RunReleaseTest(global::Hapi.Services.Tiller.TestReleaseRequest request, grpc::IServerStreamWriter<global::Hapi.Services.Tiller.TestReleaseResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReleaseService</summary>
    public partial class ReleaseServiceClient : grpc::ClientBase<ReleaseServiceClient>
    {
      /// <summary>Creates a new client for ReleaseService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ReleaseServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReleaseService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ReleaseServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ReleaseServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ReleaseServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// ListReleases retrieves release history.
      /// TODO: Allow filtering the set of releases by
      /// release status. By default, ListAllReleases returns the releases who
      /// current status is "Active".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Hapi.Services.Tiller.ListReleasesResponse> ListReleases(global::Hapi.Services.Tiller.ListReleasesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListReleases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListReleases retrieves release history.
      /// TODO: Allow filtering the set of releases by
      /// release status. By default, ListAllReleases returns the releases who
      /// current status is "Active".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Hapi.Services.Tiller.ListReleasesResponse> ListReleases(global::Hapi.Services.Tiller.ListReleasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListReleases, null, options, request);
      }
      /// <summary>
      /// GetReleasesStatus retrieves status information for the specified release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.GetReleaseStatusResponse GetReleaseStatus(global::Hapi.Services.Tiller.GetReleaseStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetReleaseStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetReleasesStatus retrieves status information for the specified release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.GetReleaseStatusResponse GetReleaseStatus(global::Hapi.Services.Tiller.GetReleaseStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReleaseStatus, null, options, request);
      }
      /// <summary>
      /// GetReleasesStatus retrieves status information for the specified release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.GetReleaseStatusResponse> GetReleaseStatusAsync(global::Hapi.Services.Tiller.GetReleaseStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetReleaseStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetReleasesStatus retrieves status information for the specified release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.GetReleaseStatusResponse> GetReleaseStatusAsync(global::Hapi.Services.Tiller.GetReleaseStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReleaseStatus, null, options, request);
      }
      /// <summary>
      /// GetReleaseContent retrieves the release content (chart + value) for the specified release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.GetReleaseContentResponse GetReleaseContent(global::Hapi.Services.Tiller.GetReleaseContentRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetReleaseContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetReleaseContent retrieves the release content (chart + value) for the specified release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.GetReleaseContentResponse GetReleaseContent(global::Hapi.Services.Tiller.GetReleaseContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReleaseContent, null, options, request);
      }
      /// <summary>
      /// GetReleaseContent retrieves the release content (chart + value) for the specified release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.GetReleaseContentResponse> GetReleaseContentAsync(global::Hapi.Services.Tiller.GetReleaseContentRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetReleaseContentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetReleaseContent retrieves the release content (chart + value) for the specified release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.GetReleaseContentResponse> GetReleaseContentAsync(global::Hapi.Services.Tiller.GetReleaseContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReleaseContent, null, options, request);
      }
      /// <summary>
      /// UpdateRelease updates release content.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.UpdateReleaseResponse UpdateRelease(global::Hapi.Services.Tiller.UpdateReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateRelease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateRelease updates release content.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.UpdateReleaseResponse UpdateRelease(global::Hapi.Services.Tiller.UpdateReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRelease, null, options, request);
      }
      /// <summary>
      /// UpdateRelease updates release content.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.UpdateReleaseResponse> UpdateReleaseAsync(global::Hapi.Services.Tiller.UpdateReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateReleaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateRelease updates release content.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.UpdateReleaseResponse> UpdateReleaseAsync(global::Hapi.Services.Tiller.UpdateReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRelease, null, options, request);
      }
      /// <summary>
      /// InstallRelease requests installation of a chart as a new release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.InstallReleaseResponse InstallRelease(global::Hapi.Services.Tiller.InstallReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InstallRelease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstallRelease requests installation of a chart as a new release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.InstallReleaseResponse InstallRelease(global::Hapi.Services.Tiller.InstallReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InstallRelease, null, options, request);
      }
      /// <summary>
      /// InstallRelease requests installation of a chart as a new release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.InstallReleaseResponse> InstallReleaseAsync(global::Hapi.Services.Tiller.InstallReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InstallReleaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstallRelease requests installation of a chart as a new release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.InstallReleaseResponse> InstallReleaseAsync(global::Hapi.Services.Tiller.InstallReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InstallRelease, null, options, request);
      }
      /// <summary>
      /// UninstallRelease requests deletion of a named release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.UninstallReleaseResponse UninstallRelease(global::Hapi.Services.Tiller.UninstallReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UninstallRelease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UninstallRelease requests deletion of a named release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.UninstallReleaseResponse UninstallRelease(global::Hapi.Services.Tiller.UninstallReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UninstallRelease, null, options, request);
      }
      /// <summary>
      /// UninstallRelease requests deletion of a named release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.UninstallReleaseResponse> UninstallReleaseAsync(global::Hapi.Services.Tiller.UninstallReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UninstallReleaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UninstallRelease requests deletion of a named release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.UninstallReleaseResponse> UninstallReleaseAsync(global::Hapi.Services.Tiller.UninstallReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UninstallRelease, null, options, request);
      }
      /// <summary>
      /// GetVersion returns the current version of the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.GetVersionResponse GetVersion(global::Hapi.Services.Tiller.GetVersionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetVersion returns the current version of the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.GetVersionResponse GetVersion(global::Hapi.Services.Tiller.GetVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      /// GetVersion returns the current version of the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.GetVersionResponse> GetVersionAsync(global::Hapi.Services.Tiller.GetVersionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetVersion returns the current version of the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.GetVersionResponse> GetVersionAsync(global::Hapi.Services.Tiller.GetVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      /// RollbackRelease rolls back a release to a previous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.RollbackReleaseResponse RollbackRelease(global::Hapi.Services.Tiller.RollbackReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RollbackRelease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RollbackRelease rolls back a release to a previous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.RollbackReleaseResponse RollbackRelease(global::Hapi.Services.Tiller.RollbackReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RollbackRelease, null, options, request);
      }
      /// <summary>
      /// RollbackRelease rolls back a release to a previous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.RollbackReleaseResponse> RollbackReleaseAsync(global::Hapi.Services.Tiller.RollbackReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RollbackReleaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RollbackRelease rolls back a release to a previous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.RollbackReleaseResponse> RollbackReleaseAsync(global::Hapi.Services.Tiller.RollbackReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RollbackRelease, null, options, request);
      }
      /// <summary>
      /// ReleaseHistory retrieves a release's history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.GetHistoryResponse GetHistory(global::Hapi.Services.Tiller.GetHistoryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReleaseHistory retrieves a release's history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Hapi.Services.Tiller.GetHistoryResponse GetHistory(global::Hapi.Services.Tiller.GetHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHistory, null, options, request);
      }
      /// <summary>
      /// ReleaseHistory retrieves a release's history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.GetHistoryResponse> GetHistoryAsync(global::Hapi.Services.Tiller.GetHistoryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReleaseHistory retrieves a release's history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Hapi.Services.Tiller.GetHistoryResponse> GetHistoryAsync(global::Hapi.Services.Tiller.GetHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHistory, null, options, request);
      }
      /// <summary>
      /// RunReleaseTest executes the tests defined of a named release
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Hapi.Services.Tiller.TestReleaseResponse> RunReleaseTest(global::Hapi.Services.Tiller.TestReleaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RunReleaseTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RunReleaseTest executes the tests defined of a named release
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Hapi.Services.Tiller.TestReleaseResponse> RunReleaseTest(global::Hapi.Services.Tiller.TestReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RunReleaseTest, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ReleaseServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReleaseServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ReleaseServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListReleases, serviceImpl.ListReleases)
          .AddMethod(__Method_GetReleaseStatus, serviceImpl.GetReleaseStatus)
          .AddMethod(__Method_GetReleaseContent, serviceImpl.GetReleaseContent)
          .AddMethod(__Method_UpdateRelease, serviceImpl.UpdateRelease)
          .AddMethod(__Method_InstallRelease, serviceImpl.InstallRelease)
          .AddMethod(__Method_UninstallRelease, serviceImpl.UninstallRelease)
          .AddMethod(__Method_GetVersion, serviceImpl.GetVersion)
          .AddMethod(__Method_RollbackRelease, serviceImpl.RollbackRelease)
          .AddMethod(__Method_GetHistory, serviceImpl.GetHistory)
          .AddMethod(__Method_RunReleaseTest, serviceImpl.RunReleaseTest).Build();
    }

  }
}
#endregion
